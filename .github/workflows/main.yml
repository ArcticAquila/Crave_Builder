name: Crave Builder
on:
  workflow_dispatch:
    # Various inputs to simplify usage of workflow.
    inputs:
      BASE_PROJECT:
        description: 'Choose a base project:'
        required: true
        default: 'LineageOS 20.0'
        type: choice
        options:
          - 'LineageOS 20.0'
          - 'LineageOS 21.0'
      REMOVALS:
        description: "Folders to be removed before syncing:"
        required: false
      BUILD_COMMAND:
        description: 'Command to be used for compiling:'
        required: true
        default: 'mka bacon -j$(nproc --all)'
      BUILD_TYPE:
        description: 'Type of build:'
        required: true
        default: 'userdebug'
        type: choice
        options: 
        - 'eng'
        - 'userdebug'
        - 'user' 
      CLEAN_BUILD:
        description: 'Build with a clean workspace?'
        required: true
        default: 'no'
        type: choice
        options: 
        - 'yes'
        - 'no'

jobs:
  test:
    name: Build using foss.crave.io
      # Change this to self-hosted after setting up devspace as github actions runner
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:

    # Create a project folder
    - name: Create Project Folders
      run: |
        if [ "${DCDEVSPACE}" != "1" ]; then
          echo "Symlinking devspace folder"
          mkdir -p devspace
          sudo mkdir -p /crave-devspaces
          sudo ln -sf ${pwd}/devspace /crave-devspaces
          sudo chmod 777 /crave-devspaces
        else
          echo "We are already running in devspace... Skipping Symlinks"
        fi
        case "${{ github.event.inputs.BASE_PROJECT }}" in
        "LineageOS 21.0")
          export PROJECTFOLDER="/crave-devspaces/Lineage21"
        ;;
        "LineageOS 20.0")
          export PROJECTFOLDER="/crave-devspaces/Lineage20"
        ;;
        esac
        if [ -d "$PROJECTFOLDER" ]; then
          echo "$PROJECTFOLDER directory exists, skipping..."
        else
          mkdir $PROJECTFOLDER
        fi
        echo "PROJECTFOLDER=$PROJECTFOLDER" >> "$GITHUB_ENV"

    # Check-out in order to access the repository's files.
    - name: Check-out to repository
      uses: actions/checkout@v4

    # Set-up a spearate directory for the device.
    - name: Set-up workspace environment
      run: |
        mkdir a03s
        cd a03s
      continue-on-error: true

    # Download and configure 'repo'.
    - name: Configure the 'repo' environment
      run: |
        # Check if repo is already installed
        if ! command -v repo >/dev/null 2>&1; then
          echo "Repo not found. Installing now..."
          # Create bin directory if it doesn't exist
          mkdir -p ~/bin
          # Download repo script
          curl https://storage.googleapis.com/git-repo-downloads/repo >> ~/bin/repo
          # Make repo script executable
          chmod a+x ~/bin/repo
          # Create symbolic link to /usr/bin/repo
          sudo ln -sf "/home/$(whoami)/bin/repo" "/usr/bin/repo"
          echo "Repo installation complete."
        else
          echo "Repo already installed."
        fi
      continue-on-error: true

    # Generate 'git' credential in base of the workflow's author.
    - name: Set-up 'git' credential(s)
      run: |
        git config --global user.name ArcticAquila
        git config --global user.email franklinazriel6942@outlook.com

    # Initialize the previously choosen 'repo' project.
    - name: Set the 'crave' project
      run: |
        cd $PROJECTFOLDER
        case "${{ github.event.inputs.BASE_PROJECT }}" in
          "LineageOS 21.0")
            repo init -u https://github.com/LineageOS/android.git -b lineage-21.0 --git-lfs --depth=1
          ;;
          "LineageOS 20.0")
            repo init -u https://github.com/LineageOS/android.git -b lineage-20.0 --git-lfs --depth=1
          ;;
        esac

    # Setup SSH Key
    - name: Setup SSH Keys
      uses: webfactory/ssh-agent@v0.5.4
      with:
          ssh-private-key: |
            ${{ secrets.SSH_PRIVATE_KEY }}
    
    # Clone specified device tree
    - name: Clone device tree
      run: |
        cd $PROJECTFOLDER
        git clone git@github.com:ArcticAquila/android_device_samsung_a03s.git -b main ./device/samsung/a03s

    # Clone specified vendor tree
    - name: Clone vendor tree
      run: |
        cd $PROJECTFOLDER
        git clone git@github.com:ArcticAquila/android_device_samsung_a03s.git -b main ./vendor/samsung/a03s

    - name: Change to Lineage
      run: | 
        cd $PROJECTFOLDER/device/samsung/a03s
        bash tools/change-version.sh lineage

    # Create a 'crave' job for building.
    - name: Start compilation through 'crave'
      run: |
        cd $PROJECTFOLDER

        if [ "${{ github.event.inputs.CLEAN_BUILD }}" == "yes" ]; then
          crave run --no-patch --clean "rm -rf .repo/local_manifests/ ${{ github.event.inputs.REMOVALS }} && \
        else
        crave run --no-patch "rm -rf .repo/local_manifests/ ${{ github.event.inputs.REMOVALS }} && \
        fi

        # Sync the repositories
        /opt/crave/resync.sh  && \

        git clone https://github.com/LineageOS/android_device_mediatek_sepolicy_vndr device/mediatek/sepolicy_vndr
        git clone https://github.com/LineageOS/android_hardware_mediatek hardware/mediatek

        # Set up build environment
        export BUILD_USERNAME=${{ github.actor }} ; \
        export BUILD_HOSTNAME=crave ; \
        source build/envsetup.sh && \

        # Build the ROM
        
        cd device/samsung/a03s
        bash tools/change-version.sh lineage
        croot
        cd system/core
        git apply ../../device/samsung/a03s/tools/fatal_to_recovery.patch
        croot
        lunch lineage_a03s-eng && \
        make installclean && \
        ${{ github.event.inputs.BUILD_COMMAND }}"

    ## DISABLED
    #- name: Extract sign key
     # env:
     #   CERTIFICATE_BASE64: ${{ secrets.FILE_BASE64 }}
      #run: |
      #  mkdir $PROJECTFOLDER/device/samsung/a03s/tmp
      #  cd $PROJECTFOLDER/device/samsung/a03s/tmp
      #  echo $CERTIFICATE_BASE64 | base64 --decode > android-certs.zip.gpg
      #  gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSWORD" --output android-certs.zip android-certs.zip.gpg
      #  unzip -P $ZIP_PASSWORD android-certs.zip

    #- name: Sign build
     # run: |
      #  cd $PROJECTFOLDER


    # Only reach this wheter the user killed the workflow.
    - name: Execute if the job is cancelled
      if: ${{ cancelled() }}
      run: |
        cd $PROJECTFOLDER
        crave stop --all

    # Pull '.zip's and '.img's from 'crave'.
    - name: Retrive build artifact(s)
      run: |
        cd $PROJECTFOLDER
        crave ssh -- sleep 1
        crave pull out/target/product/*/*.zip
        crave pull out/target/product/*/*.img

    # Directly upload to releases.
    - name: Upload to repository's releases page
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.PROJECTFOLDER }}/${{ github.event.inputs.DEVICE_NAME }}/recovery.img
          ${{ env.PROJECTFOLDER }}/${{ github.event.inputs.DEVICE_NAME }}/boot.img
          ${{ env.PROJECTFOLDER }}/${{ github.event.inputs.DEVICE_NAME }}/vendor_boot.img
          ${{ env.PROJECTFOLDER }}/${{ github.event.inputs.DEVICE_NAME }}/vendor.img
          ${{ env.PROJECTFOLDER }}/${{ github.event.inputs.DEVICE_NAME }}/system.img
          ${{ env.PROJECTFOLDER }}/${{ github.event.inputs.DEVICE_NAME }}/*.zip
        name: ${{ github.event.inputs.PRODUCT_NAME }}-${{ github.run_id }}
        tag_name: ${{ github.run_id }}
        body: |
          Target: ${{ github.event.inputs.PRODUCT_NAME }}-${{ github.event.inputs.BUILD_TYPE }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PROJECTFOLDER: ${PROJECTFOLDER}
